setwd("/Users/gp/scripts/GERO_Ivo")
library(ggplot2)
library(dplyr)
# Define function for 95% confidence intervals
conf_int_95 <- function(data) {
mean <- mean(data, na.rm = TRUE)
inf <- quantile(data, probs = 0.025, na.rm = TRUE)
sup <- quantile(data, probs = 0.975, na.rm = TRUE)
return(c(mean, inf, sup))
}
# Tasks and y_label definition
tasks <- c('animales', 'fas')
y_label <- 'mean_absolute_error_MMSE_Total_Score'
# Define the results directory based on the OS
results_dir <- ifelse(grepl("Users/gp", Sys.info()['user']),
file.path(Sys.getenv("HOME"), "results", "GERO_Ivo"),
"D:/results/GERO_Ivo")
# Load the metrics data (assuming it's a .pkl or .csv file)
metrics_df <- readRDS(file.path(results_dir, "all_metrics.rds"))
# Define function for 95% confidence intervals
conf_int_95 <- function(data) {
mean <- mean(data, na.rm = TRUE)
inf <- quantile(data, probs = 0.025, na.rm = TRUE)
sup <- quantile(data, probs = 0.975, na.rm = TRUE)
return(c(mean, inf, sup))
}
library(ggplot2)
library(dplyr)
# Define function for 95% confidence intervals
conf_int_95 <- function(data) {
mean <- mean(data, na.rm = TRUE)
inf <- quantile(data, probs = 0.025, na.rm = TRUE)
sup <- quantile(data, probs = 0.975, na.rm = TRUE)
return(c(mean, inf, sup))
}
# Tasks and y_label definition
tasks <- c('animales', 'fas')
y_label <- 'mean_absolute_error_MMSE_Total_Score'
# Define the results directory based on the OS
results_dir <- ifelse(grepl("gp", Sys.info()['user']),
file.path(Sys.getenv("HOME"), "results", "GERO_Ivo"),
"D:/results/GERO_Ivo")
# Load the metrics data (assuming it's a .pkl or .csv file)
metrics_df <- readRDS(file.path(results_dir, "all_metrics.rds"))
